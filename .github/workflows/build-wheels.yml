# .github/workflows/build-wheels.yml

name: Build, Tag, and Publish Wheels

# When this workflow is triggered
on:
  # Run ONLY on pushes to the main branch
  push:
    branches: [ "main" ]
  # Allow manual triggering from the GitHub Actions UI
  workflow_dispatch:

# Add permissions for the workflow to create a Git tag
permissions:
  contents: write # This is required to push a new tag

jobs:
  # This job checks for a version change and creates a tag
  tag_release:
    name: Tag Release
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag.outputs.tag_name }}
      tag_created: ${{ steps.tag.outputs.tag_created }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          # Use grep and sed to extract the version string from the file
          VERSION=$(grep '^version = ' pyproject.toml | sed -e 's/version = "//' -e 's/"//')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Found version: $VERSION"

      - name: Create and push Git tag
        id: tag
        run: |
          TAG_NAME="v${{ steps.get_version.outputs.version }}"
          echo "Checking for tag: $TAG_NAME"
          # Check if the tag already exists in the remote repository
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
            echo "Tag $TAG_NAME already exists. No new release needed."
            echo "tag_created=false" >> "$GITHUB_OUTPUT"
          else
            echo "Tag $TAG_NAME does not exist. Creating new release."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "$TAG_NAME" -m "Release version ${{ steps.get_version.outputs.version }}"
            git push origin "$TAG_NAME"
            echo "tag_created=true" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
          fi

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: [tag_release]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Checkout the specific tag created in the previous job
          ref: ${{ needs.tag_release.outputs.tag_name }}
          # Only checkout the tag if one was actually created
          fetch-depth: 0 # required for maturin-action to get tag info

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist

  publish_to_pypi:
    name: Publish to PyPI
    needs: [tag_release, build_wheels]
    if: needs.tag_release.outputs.tag_created == 'true'

    runs-on: ubuntu-latest
    
    # This job will now run inside your specified environment
    environment: wheels_omniregress

    permissions:
      id-token: write

    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: List files in dist
        run: ls -R dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1